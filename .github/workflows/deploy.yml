name: Deploy Function and Infra

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      storageAccountName:
        description: 'Optional storage account name (leave blank to auto-generate)'
        required: false
      functionAppName:
        description: 'Optional function app name (leave blank to auto-generate)'
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: 'Azure Login (OIDC)'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true

    - name: 'Deploy Bicep'
      run: |
        az deployment group create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --template-file infra/main.bicep \
          --parameters storageAccountName=${{ github.event.inputs.storageAccountName }} functionAppName=${{ github.event.inputs.functionAppName }}

    - name: 'Get outputs'
      id: outputs
      run: |
        echo "##[group]Get Outputs"
        az deployment group show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name "$(az deployment group list --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query '[0].name' -o tsv)" --query properties.outputs -o json > outputs.json
        cat outputs.json
        echo "##[endgroup]"
        echo "outputs=$(jq -c . outputs.json)" >> $GITHUB_OUTPUT

    - name: 'Deploy Function App (zip)'
      run: |
        # Create a zip of the function folder
        cd QueueMessageCountToLA
        zip -r ../functionapp.zip *
        cd ..
        az functionapp deployment source config-zip --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name $(jq -r '.functionAppName.value' outputs.json) --src functionapp.zip

    - name: 'Populate queues (post-deploy)'
      env:
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
      run: |
        echo "Running post-deploy populate script"
        # Ensure pwsh is available
        pwsh -c 'Write-Host "Using PowerShell $(pwsh --version)"'

        # Get deployment name
        deploymentName=$(az deployment group list --resource-group $AZURE_RESOURCE_GROUP --query '[0].name' -o tsv)
        echo "Deployment: $deploymentName"

        # Run the populate script with parameters
        pwsh ./scripts/populate-queues.ps1 -ResourceGroup $AZURE_RESOURCE_GROUP -DeploymentName $deploymentName -MinMessages 1 -MaxMessages 50
